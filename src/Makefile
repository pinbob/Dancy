# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/dancy
pkgincludedir = $(includedir)/dancy
pkglibdir = $(libdir)/dancy
pkglibexecdir = $(libexecdir)/dancy
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = dancy$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_dancy_OBJECTS = dancy-ArManager.$(OBJEXT) dancy-Arrow.$(OBJEXT) \
	dancy-ArrowFactory.$(OBJEXT) \
	dancy-ArrowPrototypeFactory.$(OBJEXT) \
	dancy-ASceneNode.$(OBJEXT) dancy-ConfigFileManager.$(OBJEXT) \
	dancy-DefaultGameLogic.$(OBJEXT) \
	dancy-GameEventReceiver.$(OBJEXT) dancy-GameInfo.$(OBJEXT) \
	dancy-GameObject.$(OBJEXT) dancy-GameOverState.$(OBJEXT) \
	dancy-HighScore.$(OBJEXT) dancy-irrAR.$(OBJEXT) \
	dancy-MenuFactory.$(OBJEXT) dancy-MenuHandler.$(OBJEXT) \
	dancy-NoteData.$(OBJEXT) dancy-NotesLoader.$(OBJEXT) \
	dancy-NoteTypes.$(OBJEXT) dancy-Score.$(OBJEXT) \
	dancy-SettingHandler.$(OBJEXT) dancy-SongCollection.$(OBJEXT) \
	dancy-Song.$(OBJEXT) dancy-SongListScreen.$(OBJEXT) \
	dancy-StateMachine.$(OBJEXT) dancy-test.$(OBJEXT)
dancy_OBJECTS = $(am_dancy_OBJECTS)
dancy_LDADD = $(LDADD)
dancy_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(dancy_LDFLAGS) \
	$(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(dancy_SOURCES)
DIST_SOURCES = $(dancy_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/missing --run tar
AUTOCONF = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/missing --run autoconf
AUTOHEADER = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/missing --run autoheader
AUTOMAKE = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
GREP = /usr/bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lgstreamer-0.10 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = dancy
PACKAGE_BUGREPORT = 
PACKAGE_NAME = dancy
PACKAGE_STRING = dancy 0.5
PACKAGE_TARNAME = dancy
PACKAGE_URL = 
PACKAGE_VERSION = 0.5
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.5
abs_builddir = /home/yejiabin/Programs/DancyMk/Dancy/src
abs_srcdir = /home/yejiabin/Programs/DancyMk/Dancy/src
abs_top_builddir = /home/yejiabin/Programs/DancyMk/Dancy
abs_top_srcdir = /home/yejiabin/Programs/DancyMk/Dancy
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/yejiabin/Programs/DancyMk/Dancy/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
dancy_SOURCES = ArManager.cpp ArManager.h Arrow.cpp ArrowFactory.cpp ArrowFactory.h Arrow.h ArrowPrototypeFactory.cpp ArrowPrototypeFactory.h ASceneNode.cpp ASceneNode.h CGameLogic.h ConfigFileManager.cpp ConfigFileManager.h Config.h DefaultGameLogic.cpp DefaultGameLogic.h GameEventReceiver.cpp GameEventReceiver.h GameInfo.cpp GameInfo.h GameObject.cpp GameObject.h GameOverState.cpp GameOverState.h HighScore.cpp HighScore.h IConfigFileReader.h IConfigFileWriter.h IGameLogic.h irrAR.cpp irrAR.h IState.h MenuFactory.cpp MenuFactory.h MenuHandler.cpp MenuHandler.h MyEventReceiver.h MyNode.h note_config.h NoteData.cpp NoteData.h NotesLoader.cpp NotesLoader.h NoteTypes.cpp NoteTypes.h Score.cpp Score.h SettingHandler.cpp SettingHandler.h SongCollection.cpp SongCollection.h Song.cpp Song.h SongListScreen.cpp SongListScreen.h StateMachine.cpp StateMachine.h test.cpp
dancy_LDFLAGS = -lIrrlicht -lvorbisfile -lIrrKlang -lgstreamer-0.10 -lARgsub -lARgsubUtil -lAR -lARMulti -lARvidel
dancy_CPPFLAGS = -I../include -L../lib
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
dancy$(EXEEXT): $(dancy_OBJECTS) $(dancy_DEPENDENCIES) 
	@rm -f dancy$(EXEEXT)
	$(dancy_LINK) $(dancy_OBJECTS) $(dancy_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/dancy-ASceneNode.Po
include ./$(DEPDIR)/dancy-ArManager.Po
include ./$(DEPDIR)/dancy-Arrow.Po
include ./$(DEPDIR)/dancy-ArrowFactory.Po
include ./$(DEPDIR)/dancy-ArrowPrototypeFactory.Po
include ./$(DEPDIR)/dancy-ConfigFileManager.Po
include ./$(DEPDIR)/dancy-DefaultGameLogic.Po
include ./$(DEPDIR)/dancy-GameEventReceiver.Po
include ./$(DEPDIR)/dancy-GameInfo.Po
include ./$(DEPDIR)/dancy-GameObject.Po
include ./$(DEPDIR)/dancy-GameOverState.Po
include ./$(DEPDIR)/dancy-HighScore.Po
include ./$(DEPDIR)/dancy-MenuFactory.Po
include ./$(DEPDIR)/dancy-MenuHandler.Po
include ./$(DEPDIR)/dancy-NoteData.Po
include ./$(DEPDIR)/dancy-NoteTypes.Po
include ./$(DEPDIR)/dancy-NotesLoader.Po
include ./$(DEPDIR)/dancy-Score.Po
include ./$(DEPDIR)/dancy-SettingHandler.Po
include ./$(DEPDIR)/dancy-Song.Po
include ./$(DEPDIR)/dancy-SongCollection.Po
include ./$(DEPDIR)/dancy-SongListScreen.Po
include ./$(DEPDIR)/dancy-StateMachine.Po
include ./$(DEPDIR)/dancy-irrAR.Po
include ./$(DEPDIR)/dancy-test.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

dancy-ArManager.o: ArManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ArManager.o -MD -MP -MF $(DEPDIR)/dancy-ArManager.Tpo -c -o dancy-ArManager.o `test -f 'ArManager.cpp' || echo '$(srcdir)/'`ArManager.cpp
	$(am__mv) $(DEPDIR)/dancy-ArManager.Tpo $(DEPDIR)/dancy-ArManager.Po
#	source='ArManager.cpp' object='dancy-ArManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ArManager.o `test -f 'ArManager.cpp' || echo '$(srcdir)/'`ArManager.cpp

dancy-ArManager.obj: ArManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ArManager.obj -MD -MP -MF $(DEPDIR)/dancy-ArManager.Tpo -c -o dancy-ArManager.obj `if test -f 'ArManager.cpp'; then $(CYGPATH_W) 'ArManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ArManager.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-ArManager.Tpo $(DEPDIR)/dancy-ArManager.Po
#	source='ArManager.cpp' object='dancy-ArManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ArManager.obj `if test -f 'ArManager.cpp'; then $(CYGPATH_W) 'ArManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ArManager.cpp'; fi`

dancy-Arrow.o: Arrow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-Arrow.o -MD -MP -MF $(DEPDIR)/dancy-Arrow.Tpo -c -o dancy-Arrow.o `test -f 'Arrow.cpp' || echo '$(srcdir)/'`Arrow.cpp
	$(am__mv) $(DEPDIR)/dancy-Arrow.Tpo $(DEPDIR)/dancy-Arrow.Po
#	source='Arrow.cpp' object='dancy-Arrow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-Arrow.o `test -f 'Arrow.cpp' || echo '$(srcdir)/'`Arrow.cpp

dancy-Arrow.obj: Arrow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-Arrow.obj -MD -MP -MF $(DEPDIR)/dancy-Arrow.Tpo -c -o dancy-Arrow.obj `if test -f 'Arrow.cpp'; then $(CYGPATH_W) 'Arrow.cpp'; else $(CYGPATH_W) '$(srcdir)/Arrow.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-Arrow.Tpo $(DEPDIR)/dancy-Arrow.Po
#	source='Arrow.cpp' object='dancy-Arrow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-Arrow.obj `if test -f 'Arrow.cpp'; then $(CYGPATH_W) 'Arrow.cpp'; else $(CYGPATH_W) '$(srcdir)/Arrow.cpp'; fi`

dancy-ArrowFactory.o: ArrowFactory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ArrowFactory.o -MD -MP -MF $(DEPDIR)/dancy-ArrowFactory.Tpo -c -o dancy-ArrowFactory.o `test -f 'ArrowFactory.cpp' || echo '$(srcdir)/'`ArrowFactory.cpp
	$(am__mv) $(DEPDIR)/dancy-ArrowFactory.Tpo $(DEPDIR)/dancy-ArrowFactory.Po
#	source='ArrowFactory.cpp' object='dancy-ArrowFactory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ArrowFactory.o `test -f 'ArrowFactory.cpp' || echo '$(srcdir)/'`ArrowFactory.cpp

dancy-ArrowFactory.obj: ArrowFactory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ArrowFactory.obj -MD -MP -MF $(DEPDIR)/dancy-ArrowFactory.Tpo -c -o dancy-ArrowFactory.obj `if test -f 'ArrowFactory.cpp'; then $(CYGPATH_W) 'ArrowFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/ArrowFactory.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-ArrowFactory.Tpo $(DEPDIR)/dancy-ArrowFactory.Po
#	source='ArrowFactory.cpp' object='dancy-ArrowFactory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ArrowFactory.obj `if test -f 'ArrowFactory.cpp'; then $(CYGPATH_W) 'ArrowFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/ArrowFactory.cpp'; fi`

dancy-ArrowPrototypeFactory.o: ArrowPrototypeFactory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ArrowPrototypeFactory.o -MD -MP -MF $(DEPDIR)/dancy-ArrowPrototypeFactory.Tpo -c -o dancy-ArrowPrototypeFactory.o `test -f 'ArrowPrototypeFactory.cpp' || echo '$(srcdir)/'`ArrowPrototypeFactory.cpp
	$(am__mv) $(DEPDIR)/dancy-ArrowPrototypeFactory.Tpo $(DEPDIR)/dancy-ArrowPrototypeFactory.Po
#	source='ArrowPrototypeFactory.cpp' object='dancy-ArrowPrototypeFactory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ArrowPrototypeFactory.o `test -f 'ArrowPrototypeFactory.cpp' || echo '$(srcdir)/'`ArrowPrototypeFactory.cpp

dancy-ArrowPrototypeFactory.obj: ArrowPrototypeFactory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ArrowPrototypeFactory.obj -MD -MP -MF $(DEPDIR)/dancy-ArrowPrototypeFactory.Tpo -c -o dancy-ArrowPrototypeFactory.obj `if test -f 'ArrowPrototypeFactory.cpp'; then $(CYGPATH_W) 'ArrowPrototypeFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/ArrowPrototypeFactory.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-ArrowPrototypeFactory.Tpo $(DEPDIR)/dancy-ArrowPrototypeFactory.Po
#	source='ArrowPrototypeFactory.cpp' object='dancy-ArrowPrototypeFactory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ArrowPrototypeFactory.obj `if test -f 'ArrowPrototypeFactory.cpp'; then $(CYGPATH_W) 'ArrowPrototypeFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/ArrowPrototypeFactory.cpp'; fi`

dancy-ASceneNode.o: ASceneNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ASceneNode.o -MD -MP -MF $(DEPDIR)/dancy-ASceneNode.Tpo -c -o dancy-ASceneNode.o `test -f 'ASceneNode.cpp' || echo '$(srcdir)/'`ASceneNode.cpp
	$(am__mv) $(DEPDIR)/dancy-ASceneNode.Tpo $(DEPDIR)/dancy-ASceneNode.Po
#	source='ASceneNode.cpp' object='dancy-ASceneNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ASceneNode.o `test -f 'ASceneNode.cpp' || echo '$(srcdir)/'`ASceneNode.cpp

dancy-ASceneNode.obj: ASceneNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ASceneNode.obj -MD -MP -MF $(DEPDIR)/dancy-ASceneNode.Tpo -c -o dancy-ASceneNode.obj `if test -f 'ASceneNode.cpp'; then $(CYGPATH_W) 'ASceneNode.cpp'; else $(CYGPATH_W) '$(srcdir)/ASceneNode.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-ASceneNode.Tpo $(DEPDIR)/dancy-ASceneNode.Po
#	source='ASceneNode.cpp' object='dancy-ASceneNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ASceneNode.obj `if test -f 'ASceneNode.cpp'; then $(CYGPATH_W) 'ASceneNode.cpp'; else $(CYGPATH_W) '$(srcdir)/ASceneNode.cpp'; fi`

dancy-ConfigFileManager.o: ConfigFileManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ConfigFileManager.o -MD -MP -MF $(DEPDIR)/dancy-ConfigFileManager.Tpo -c -o dancy-ConfigFileManager.o `test -f 'ConfigFileManager.cpp' || echo '$(srcdir)/'`ConfigFileManager.cpp
	$(am__mv) $(DEPDIR)/dancy-ConfigFileManager.Tpo $(DEPDIR)/dancy-ConfigFileManager.Po
#	source='ConfigFileManager.cpp' object='dancy-ConfigFileManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ConfigFileManager.o `test -f 'ConfigFileManager.cpp' || echo '$(srcdir)/'`ConfigFileManager.cpp

dancy-ConfigFileManager.obj: ConfigFileManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-ConfigFileManager.obj -MD -MP -MF $(DEPDIR)/dancy-ConfigFileManager.Tpo -c -o dancy-ConfigFileManager.obj `if test -f 'ConfigFileManager.cpp'; then $(CYGPATH_W) 'ConfigFileManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ConfigFileManager.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-ConfigFileManager.Tpo $(DEPDIR)/dancy-ConfigFileManager.Po
#	source='ConfigFileManager.cpp' object='dancy-ConfigFileManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-ConfigFileManager.obj `if test -f 'ConfigFileManager.cpp'; then $(CYGPATH_W) 'ConfigFileManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ConfigFileManager.cpp'; fi`

dancy-DefaultGameLogic.o: DefaultGameLogic.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-DefaultGameLogic.o -MD -MP -MF $(DEPDIR)/dancy-DefaultGameLogic.Tpo -c -o dancy-DefaultGameLogic.o `test -f 'DefaultGameLogic.cpp' || echo '$(srcdir)/'`DefaultGameLogic.cpp
	$(am__mv) $(DEPDIR)/dancy-DefaultGameLogic.Tpo $(DEPDIR)/dancy-DefaultGameLogic.Po
#	source='DefaultGameLogic.cpp' object='dancy-DefaultGameLogic.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-DefaultGameLogic.o `test -f 'DefaultGameLogic.cpp' || echo '$(srcdir)/'`DefaultGameLogic.cpp

dancy-DefaultGameLogic.obj: DefaultGameLogic.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-DefaultGameLogic.obj -MD -MP -MF $(DEPDIR)/dancy-DefaultGameLogic.Tpo -c -o dancy-DefaultGameLogic.obj `if test -f 'DefaultGameLogic.cpp'; then $(CYGPATH_W) 'DefaultGameLogic.cpp'; else $(CYGPATH_W) '$(srcdir)/DefaultGameLogic.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-DefaultGameLogic.Tpo $(DEPDIR)/dancy-DefaultGameLogic.Po
#	source='DefaultGameLogic.cpp' object='dancy-DefaultGameLogic.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-DefaultGameLogic.obj `if test -f 'DefaultGameLogic.cpp'; then $(CYGPATH_W) 'DefaultGameLogic.cpp'; else $(CYGPATH_W) '$(srcdir)/DefaultGameLogic.cpp'; fi`

dancy-GameEventReceiver.o: GameEventReceiver.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameEventReceiver.o -MD -MP -MF $(DEPDIR)/dancy-GameEventReceiver.Tpo -c -o dancy-GameEventReceiver.o `test -f 'GameEventReceiver.cpp' || echo '$(srcdir)/'`GameEventReceiver.cpp
	$(am__mv) $(DEPDIR)/dancy-GameEventReceiver.Tpo $(DEPDIR)/dancy-GameEventReceiver.Po
#	source='GameEventReceiver.cpp' object='dancy-GameEventReceiver.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameEventReceiver.o `test -f 'GameEventReceiver.cpp' || echo '$(srcdir)/'`GameEventReceiver.cpp

dancy-GameEventReceiver.obj: GameEventReceiver.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameEventReceiver.obj -MD -MP -MF $(DEPDIR)/dancy-GameEventReceiver.Tpo -c -o dancy-GameEventReceiver.obj `if test -f 'GameEventReceiver.cpp'; then $(CYGPATH_W) 'GameEventReceiver.cpp'; else $(CYGPATH_W) '$(srcdir)/GameEventReceiver.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-GameEventReceiver.Tpo $(DEPDIR)/dancy-GameEventReceiver.Po
#	source='GameEventReceiver.cpp' object='dancy-GameEventReceiver.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameEventReceiver.obj `if test -f 'GameEventReceiver.cpp'; then $(CYGPATH_W) 'GameEventReceiver.cpp'; else $(CYGPATH_W) '$(srcdir)/GameEventReceiver.cpp'; fi`

dancy-GameInfo.o: GameInfo.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameInfo.o -MD -MP -MF $(DEPDIR)/dancy-GameInfo.Tpo -c -o dancy-GameInfo.o `test -f 'GameInfo.cpp' || echo '$(srcdir)/'`GameInfo.cpp
	$(am__mv) $(DEPDIR)/dancy-GameInfo.Tpo $(DEPDIR)/dancy-GameInfo.Po
#	source='GameInfo.cpp' object='dancy-GameInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameInfo.o `test -f 'GameInfo.cpp' || echo '$(srcdir)/'`GameInfo.cpp

dancy-GameInfo.obj: GameInfo.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameInfo.obj -MD -MP -MF $(DEPDIR)/dancy-GameInfo.Tpo -c -o dancy-GameInfo.obj `if test -f 'GameInfo.cpp'; then $(CYGPATH_W) 'GameInfo.cpp'; else $(CYGPATH_W) '$(srcdir)/GameInfo.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-GameInfo.Tpo $(DEPDIR)/dancy-GameInfo.Po
#	source='GameInfo.cpp' object='dancy-GameInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameInfo.obj `if test -f 'GameInfo.cpp'; then $(CYGPATH_W) 'GameInfo.cpp'; else $(CYGPATH_W) '$(srcdir)/GameInfo.cpp'; fi`

dancy-GameObject.o: GameObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameObject.o -MD -MP -MF $(DEPDIR)/dancy-GameObject.Tpo -c -o dancy-GameObject.o `test -f 'GameObject.cpp' || echo '$(srcdir)/'`GameObject.cpp
	$(am__mv) $(DEPDIR)/dancy-GameObject.Tpo $(DEPDIR)/dancy-GameObject.Po
#	source='GameObject.cpp' object='dancy-GameObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameObject.o `test -f 'GameObject.cpp' || echo '$(srcdir)/'`GameObject.cpp

dancy-GameObject.obj: GameObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameObject.obj -MD -MP -MF $(DEPDIR)/dancy-GameObject.Tpo -c -o dancy-GameObject.obj `if test -f 'GameObject.cpp'; then $(CYGPATH_W) 'GameObject.cpp'; else $(CYGPATH_W) '$(srcdir)/GameObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-GameObject.Tpo $(DEPDIR)/dancy-GameObject.Po
#	source='GameObject.cpp' object='dancy-GameObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameObject.obj `if test -f 'GameObject.cpp'; then $(CYGPATH_W) 'GameObject.cpp'; else $(CYGPATH_W) '$(srcdir)/GameObject.cpp'; fi`

dancy-GameOverState.o: GameOverState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameOverState.o -MD -MP -MF $(DEPDIR)/dancy-GameOverState.Tpo -c -o dancy-GameOverState.o `test -f 'GameOverState.cpp' || echo '$(srcdir)/'`GameOverState.cpp
	$(am__mv) $(DEPDIR)/dancy-GameOverState.Tpo $(DEPDIR)/dancy-GameOverState.Po
#	source='GameOverState.cpp' object='dancy-GameOverState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameOverState.o `test -f 'GameOverState.cpp' || echo '$(srcdir)/'`GameOverState.cpp

dancy-GameOverState.obj: GameOverState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-GameOverState.obj -MD -MP -MF $(DEPDIR)/dancy-GameOverState.Tpo -c -o dancy-GameOverState.obj `if test -f 'GameOverState.cpp'; then $(CYGPATH_W) 'GameOverState.cpp'; else $(CYGPATH_W) '$(srcdir)/GameOverState.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-GameOverState.Tpo $(DEPDIR)/dancy-GameOverState.Po
#	source='GameOverState.cpp' object='dancy-GameOverState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-GameOverState.obj `if test -f 'GameOverState.cpp'; then $(CYGPATH_W) 'GameOverState.cpp'; else $(CYGPATH_W) '$(srcdir)/GameOverState.cpp'; fi`

dancy-HighScore.o: HighScore.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-HighScore.o -MD -MP -MF $(DEPDIR)/dancy-HighScore.Tpo -c -o dancy-HighScore.o `test -f 'HighScore.cpp' || echo '$(srcdir)/'`HighScore.cpp
	$(am__mv) $(DEPDIR)/dancy-HighScore.Tpo $(DEPDIR)/dancy-HighScore.Po
#	source='HighScore.cpp' object='dancy-HighScore.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-HighScore.o `test -f 'HighScore.cpp' || echo '$(srcdir)/'`HighScore.cpp

dancy-HighScore.obj: HighScore.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-HighScore.obj -MD -MP -MF $(DEPDIR)/dancy-HighScore.Tpo -c -o dancy-HighScore.obj `if test -f 'HighScore.cpp'; then $(CYGPATH_W) 'HighScore.cpp'; else $(CYGPATH_W) '$(srcdir)/HighScore.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-HighScore.Tpo $(DEPDIR)/dancy-HighScore.Po
#	source='HighScore.cpp' object='dancy-HighScore.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-HighScore.obj `if test -f 'HighScore.cpp'; then $(CYGPATH_W) 'HighScore.cpp'; else $(CYGPATH_W) '$(srcdir)/HighScore.cpp'; fi`

dancy-irrAR.o: irrAR.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-irrAR.o -MD -MP -MF $(DEPDIR)/dancy-irrAR.Tpo -c -o dancy-irrAR.o `test -f 'irrAR.cpp' || echo '$(srcdir)/'`irrAR.cpp
	$(am__mv) $(DEPDIR)/dancy-irrAR.Tpo $(DEPDIR)/dancy-irrAR.Po
#	source='irrAR.cpp' object='dancy-irrAR.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-irrAR.o `test -f 'irrAR.cpp' || echo '$(srcdir)/'`irrAR.cpp

dancy-irrAR.obj: irrAR.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-irrAR.obj -MD -MP -MF $(DEPDIR)/dancy-irrAR.Tpo -c -o dancy-irrAR.obj `if test -f 'irrAR.cpp'; then $(CYGPATH_W) 'irrAR.cpp'; else $(CYGPATH_W) '$(srcdir)/irrAR.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-irrAR.Tpo $(DEPDIR)/dancy-irrAR.Po
#	source='irrAR.cpp' object='dancy-irrAR.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-irrAR.obj `if test -f 'irrAR.cpp'; then $(CYGPATH_W) 'irrAR.cpp'; else $(CYGPATH_W) '$(srcdir)/irrAR.cpp'; fi`

dancy-MenuFactory.o: MenuFactory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-MenuFactory.o -MD -MP -MF $(DEPDIR)/dancy-MenuFactory.Tpo -c -o dancy-MenuFactory.o `test -f 'MenuFactory.cpp' || echo '$(srcdir)/'`MenuFactory.cpp
	$(am__mv) $(DEPDIR)/dancy-MenuFactory.Tpo $(DEPDIR)/dancy-MenuFactory.Po
#	source='MenuFactory.cpp' object='dancy-MenuFactory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-MenuFactory.o `test -f 'MenuFactory.cpp' || echo '$(srcdir)/'`MenuFactory.cpp

dancy-MenuFactory.obj: MenuFactory.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-MenuFactory.obj -MD -MP -MF $(DEPDIR)/dancy-MenuFactory.Tpo -c -o dancy-MenuFactory.obj `if test -f 'MenuFactory.cpp'; then $(CYGPATH_W) 'MenuFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/MenuFactory.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-MenuFactory.Tpo $(DEPDIR)/dancy-MenuFactory.Po
#	source='MenuFactory.cpp' object='dancy-MenuFactory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-MenuFactory.obj `if test -f 'MenuFactory.cpp'; then $(CYGPATH_W) 'MenuFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/MenuFactory.cpp'; fi`

dancy-MenuHandler.o: MenuHandler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-MenuHandler.o -MD -MP -MF $(DEPDIR)/dancy-MenuHandler.Tpo -c -o dancy-MenuHandler.o `test -f 'MenuHandler.cpp' || echo '$(srcdir)/'`MenuHandler.cpp
	$(am__mv) $(DEPDIR)/dancy-MenuHandler.Tpo $(DEPDIR)/dancy-MenuHandler.Po
#	source='MenuHandler.cpp' object='dancy-MenuHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-MenuHandler.o `test -f 'MenuHandler.cpp' || echo '$(srcdir)/'`MenuHandler.cpp

dancy-MenuHandler.obj: MenuHandler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-MenuHandler.obj -MD -MP -MF $(DEPDIR)/dancy-MenuHandler.Tpo -c -o dancy-MenuHandler.obj `if test -f 'MenuHandler.cpp'; then $(CYGPATH_W) 'MenuHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/MenuHandler.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-MenuHandler.Tpo $(DEPDIR)/dancy-MenuHandler.Po
#	source='MenuHandler.cpp' object='dancy-MenuHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-MenuHandler.obj `if test -f 'MenuHandler.cpp'; then $(CYGPATH_W) 'MenuHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/MenuHandler.cpp'; fi`

dancy-NoteData.o: NoteData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-NoteData.o -MD -MP -MF $(DEPDIR)/dancy-NoteData.Tpo -c -o dancy-NoteData.o `test -f 'NoteData.cpp' || echo '$(srcdir)/'`NoteData.cpp
	$(am__mv) $(DEPDIR)/dancy-NoteData.Tpo $(DEPDIR)/dancy-NoteData.Po
#	source='NoteData.cpp' object='dancy-NoteData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-NoteData.o `test -f 'NoteData.cpp' || echo '$(srcdir)/'`NoteData.cpp

dancy-NoteData.obj: NoteData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-NoteData.obj -MD -MP -MF $(DEPDIR)/dancy-NoteData.Tpo -c -o dancy-NoteData.obj `if test -f 'NoteData.cpp'; then $(CYGPATH_W) 'NoteData.cpp'; else $(CYGPATH_W) '$(srcdir)/NoteData.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-NoteData.Tpo $(DEPDIR)/dancy-NoteData.Po
#	source='NoteData.cpp' object='dancy-NoteData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-NoteData.obj `if test -f 'NoteData.cpp'; then $(CYGPATH_W) 'NoteData.cpp'; else $(CYGPATH_W) '$(srcdir)/NoteData.cpp'; fi`

dancy-NotesLoader.o: NotesLoader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-NotesLoader.o -MD -MP -MF $(DEPDIR)/dancy-NotesLoader.Tpo -c -o dancy-NotesLoader.o `test -f 'NotesLoader.cpp' || echo '$(srcdir)/'`NotesLoader.cpp
	$(am__mv) $(DEPDIR)/dancy-NotesLoader.Tpo $(DEPDIR)/dancy-NotesLoader.Po
#	source='NotesLoader.cpp' object='dancy-NotesLoader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-NotesLoader.o `test -f 'NotesLoader.cpp' || echo '$(srcdir)/'`NotesLoader.cpp

dancy-NotesLoader.obj: NotesLoader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-NotesLoader.obj -MD -MP -MF $(DEPDIR)/dancy-NotesLoader.Tpo -c -o dancy-NotesLoader.obj `if test -f 'NotesLoader.cpp'; then $(CYGPATH_W) 'NotesLoader.cpp'; else $(CYGPATH_W) '$(srcdir)/NotesLoader.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-NotesLoader.Tpo $(DEPDIR)/dancy-NotesLoader.Po
#	source='NotesLoader.cpp' object='dancy-NotesLoader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-NotesLoader.obj `if test -f 'NotesLoader.cpp'; then $(CYGPATH_W) 'NotesLoader.cpp'; else $(CYGPATH_W) '$(srcdir)/NotesLoader.cpp'; fi`

dancy-NoteTypes.o: NoteTypes.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-NoteTypes.o -MD -MP -MF $(DEPDIR)/dancy-NoteTypes.Tpo -c -o dancy-NoteTypes.o `test -f 'NoteTypes.cpp' || echo '$(srcdir)/'`NoteTypes.cpp
	$(am__mv) $(DEPDIR)/dancy-NoteTypes.Tpo $(DEPDIR)/dancy-NoteTypes.Po
#	source='NoteTypes.cpp' object='dancy-NoteTypes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-NoteTypes.o `test -f 'NoteTypes.cpp' || echo '$(srcdir)/'`NoteTypes.cpp

dancy-NoteTypes.obj: NoteTypes.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-NoteTypes.obj -MD -MP -MF $(DEPDIR)/dancy-NoteTypes.Tpo -c -o dancy-NoteTypes.obj `if test -f 'NoteTypes.cpp'; then $(CYGPATH_W) 'NoteTypes.cpp'; else $(CYGPATH_W) '$(srcdir)/NoteTypes.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-NoteTypes.Tpo $(DEPDIR)/dancy-NoteTypes.Po
#	source='NoteTypes.cpp' object='dancy-NoteTypes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-NoteTypes.obj `if test -f 'NoteTypes.cpp'; then $(CYGPATH_W) 'NoteTypes.cpp'; else $(CYGPATH_W) '$(srcdir)/NoteTypes.cpp'; fi`

dancy-Score.o: Score.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-Score.o -MD -MP -MF $(DEPDIR)/dancy-Score.Tpo -c -o dancy-Score.o `test -f 'Score.cpp' || echo '$(srcdir)/'`Score.cpp
	$(am__mv) $(DEPDIR)/dancy-Score.Tpo $(DEPDIR)/dancy-Score.Po
#	source='Score.cpp' object='dancy-Score.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-Score.o `test -f 'Score.cpp' || echo '$(srcdir)/'`Score.cpp

dancy-Score.obj: Score.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-Score.obj -MD -MP -MF $(DEPDIR)/dancy-Score.Tpo -c -o dancy-Score.obj `if test -f 'Score.cpp'; then $(CYGPATH_W) 'Score.cpp'; else $(CYGPATH_W) '$(srcdir)/Score.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-Score.Tpo $(DEPDIR)/dancy-Score.Po
#	source='Score.cpp' object='dancy-Score.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-Score.obj `if test -f 'Score.cpp'; then $(CYGPATH_W) 'Score.cpp'; else $(CYGPATH_W) '$(srcdir)/Score.cpp'; fi`

dancy-SettingHandler.o: SettingHandler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-SettingHandler.o -MD -MP -MF $(DEPDIR)/dancy-SettingHandler.Tpo -c -o dancy-SettingHandler.o `test -f 'SettingHandler.cpp' || echo '$(srcdir)/'`SettingHandler.cpp
	$(am__mv) $(DEPDIR)/dancy-SettingHandler.Tpo $(DEPDIR)/dancy-SettingHandler.Po
#	source='SettingHandler.cpp' object='dancy-SettingHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-SettingHandler.o `test -f 'SettingHandler.cpp' || echo '$(srcdir)/'`SettingHandler.cpp

dancy-SettingHandler.obj: SettingHandler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-SettingHandler.obj -MD -MP -MF $(DEPDIR)/dancy-SettingHandler.Tpo -c -o dancy-SettingHandler.obj `if test -f 'SettingHandler.cpp'; then $(CYGPATH_W) 'SettingHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/SettingHandler.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-SettingHandler.Tpo $(DEPDIR)/dancy-SettingHandler.Po
#	source='SettingHandler.cpp' object='dancy-SettingHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-SettingHandler.obj `if test -f 'SettingHandler.cpp'; then $(CYGPATH_W) 'SettingHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/SettingHandler.cpp'; fi`

dancy-SongCollection.o: SongCollection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-SongCollection.o -MD -MP -MF $(DEPDIR)/dancy-SongCollection.Tpo -c -o dancy-SongCollection.o `test -f 'SongCollection.cpp' || echo '$(srcdir)/'`SongCollection.cpp
	$(am__mv) $(DEPDIR)/dancy-SongCollection.Tpo $(DEPDIR)/dancy-SongCollection.Po
#	source='SongCollection.cpp' object='dancy-SongCollection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-SongCollection.o `test -f 'SongCollection.cpp' || echo '$(srcdir)/'`SongCollection.cpp

dancy-SongCollection.obj: SongCollection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-SongCollection.obj -MD -MP -MF $(DEPDIR)/dancy-SongCollection.Tpo -c -o dancy-SongCollection.obj `if test -f 'SongCollection.cpp'; then $(CYGPATH_W) 'SongCollection.cpp'; else $(CYGPATH_W) '$(srcdir)/SongCollection.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-SongCollection.Tpo $(DEPDIR)/dancy-SongCollection.Po
#	source='SongCollection.cpp' object='dancy-SongCollection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-SongCollection.obj `if test -f 'SongCollection.cpp'; then $(CYGPATH_W) 'SongCollection.cpp'; else $(CYGPATH_W) '$(srcdir)/SongCollection.cpp'; fi`

dancy-Song.o: Song.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-Song.o -MD -MP -MF $(DEPDIR)/dancy-Song.Tpo -c -o dancy-Song.o `test -f 'Song.cpp' || echo '$(srcdir)/'`Song.cpp
	$(am__mv) $(DEPDIR)/dancy-Song.Tpo $(DEPDIR)/dancy-Song.Po
#	source='Song.cpp' object='dancy-Song.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-Song.o `test -f 'Song.cpp' || echo '$(srcdir)/'`Song.cpp

dancy-Song.obj: Song.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-Song.obj -MD -MP -MF $(DEPDIR)/dancy-Song.Tpo -c -o dancy-Song.obj `if test -f 'Song.cpp'; then $(CYGPATH_W) 'Song.cpp'; else $(CYGPATH_W) '$(srcdir)/Song.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-Song.Tpo $(DEPDIR)/dancy-Song.Po
#	source='Song.cpp' object='dancy-Song.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-Song.obj `if test -f 'Song.cpp'; then $(CYGPATH_W) 'Song.cpp'; else $(CYGPATH_W) '$(srcdir)/Song.cpp'; fi`

dancy-SongListScreen.o: SongListScreen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-SongListScreen.o -MD -MP -MF $(DEPDIR)/dancy-SongListScreen.Tpo -c -o dancy-SongListScreen.o `test -f 'SongListScreen.cpp' || echo '$(srcdir)/'`SongListScreen.cpp
	$(am__mv) $(DEPDIR)/dancy-SongListScreen.Tpo $(DEPDIR)/dancy-SongListScreen.Po
#	source='SongListScreen.cpp' object='dancy-SongListScreen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-SongListScreen.o `test -f 'SongListScreen.cpp' || echo '$(srcdir)/'`SongListScreen.cpp

dancy-SongListScreen.obj: SongListScreen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-SongListScreen.obj -MD -MP -MF $(DEPDIR)/dancy-SongListScreen.Tpo -c -o dancy-SongListScreen.obj `if test -f 'SongListScreen.cpp'; then $(CYGPATH_W) 'SongListScreen.cpp'; else $(CYGPATH_W) '$(srcdir)/SongListScreen.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-SongListScreen.Tpo $(DEPDIR)/dancy-SongListScreen.Po
#	source='SongListScreen.cpp' object='dancy-SongListScreen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-SongListScreen.obj `if test -f 'SongListScreen.cpp'; then $(CYGPATH_W) 'SongListScreen.cpp'; else $(CYGPATH_W) '$(srcdir)/SongListScreen.cpp'; fi`

dancy-StateMachine.o: StateMachine.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-StateMachine.o -MD -MP -MF $(DEPDIR)/dancy-StateMachine.Tpo -c -o dancy-StateMachine.o `test -f 'StateMachine.cpp' || echo '$(srcdir)/'`StateMachine.cpp
	$(am__mv) $(DEPDIR)/dancy-StateMachine.Tpo $(DEPDIR)/dancy-StateMachine.Po
#	source='StateMachine.cpp' object='dancy-StateMachine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-StateMachine.o `test -f 'StateMachine.cpp' || echo '$(srcdir)/'`StateMachine.cpp

dancy-StateMachine.obj: StateMachine.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-StateMachine.obj -MD -MP -MF $(DEPDIR)/dancy-StateMachine.Tpo -c -o dancy-StateMachine.obj `if test -f 'StateMachine.cpp'; then $(CYGPATH_W) 'StateMachine.cpp'; else $(CYGPATH_W) '$(srcdir)/StateMachine.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-StateMachine.Tpo $(DEPDIR)/dancy-StateMachine.Po
#	source='StateMachine.cpp' object='dancy-StateMachine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-StateMachine.obj `if test -f 'StateMachine.cpp'; then $(CYGPATH_W) 'StateMachine.cpp'; else $(CYGPATH_W) '$(srcdir)/StateMachine.cpp'; fi`

dancy-test.o: test.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-test.o -MD -MP -MF $(DEPDIR)/dancy-test.Tpo -c -o dancy-test.o `test -f 'test.cpp' || echo '$(srcdir)/'`test.cpp
	$(am__mv) $(DEPDIR)/dancy-test.Tpo $(DEPDIR)/dancy-test.Po
#	source='test.cpp' object='dancy-test.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-test.o `test -f 'test.cpp' || echo '$(srcdir)/'`test.cpp

dancy-test.obj: test.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dancy-test.obj -MD -MP -MF $(DEPDIR)/dancy-test.Tpo -c -o dancy-test.obj `if test -f 'test.cpp'; then $(CYGPATH_W) 'test.cpp'; else $(CYGPATH_W) '$(srcdir)/test.cpp'; fi`
	$(am__mv) $(DEPDIR)/dancy-test.Tpo $(DEPDIR)/dancy-test.Po
#	source='test.cpp' object='dancy-test.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dancy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dancy-test.obj `if test -f 'test.cpp'; then $(CYGPATH_W) 'test.cpp'; else $(CYGPATH_W) '$(srcdir)/test.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
